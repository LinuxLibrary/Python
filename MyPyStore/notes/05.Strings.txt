Strings:
--------

>>> message = "new string"
>>> print message
new string

>>> for letter in message:
...  print letter
... 	--> if you hit return here then the output will be

n
e
w

s
t
r
i
n
g

>>> message2 = "new string"

>>> if message == message2:
...  print "They Match!"
...  
They Match!

>>> message2 = "new strings"

>>> if message == message2:
...  print "They Match!"
...  
They Match!


Usage of Strings:
>>> import string
>>> string.upper(message)
'NEW STRING'

>>> print message
'new string'

>>> message = string.upper(message)
>>> print message
'NEW STRING'

>>> message2 = "new strings"
'new strings'

>>> message = string.lower(message)
>>> print message
'new string'

>>> string.capitalize(message)
'New string'

>>> string.capwords(message)
'New String'

>>> product = "linuxcbt scripting edition"
'linuxcbt scripting edition'


>>> string.split(message)
['new', 'string']

>>> string.split(product)
['linuxcbt', 'scripting', 'edition']

>>> product = string.split(product)
>>> print product
['linuxcbt', 'scripting', 'edition']

>>> string.join(product)
>>> product = string.join(product)
>>> print product
'linuxcbt scripting edition'



# vi strings.py

#!/usr/bin/python
# Author : Arjun Shrinivas
# Purpose : Illustrate string manipulation functions

import string

message = "new string"
message2 = "new strings"
print message
print message, "contains", len(message), "characters"
print "The first character in", message, "is: ", message[0]
print "Example of slicing", message, message[0:4]

for letter in message:
	print letter

if message == message2:
	print "They match!"

message = string.upper(message)
print message
message = string.lower(message)
print "After reassignment ", message
print string.capitalize(message)
print string.capwords(message)
print string.split(message)
print string.join(message)


# END
:x

