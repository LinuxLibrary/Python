# Built-in methods for str data extraction

One of the method of str data extraction is "in" and "not in" text operators.
Technically "in" and "not in" test operators call a method on your str object,
__contains__(). We can use both "in" and "not in" to determine if a string is
a part of another string.

In [1]: import subprocess
In [2]: res = subprocess.Popen(['uname', '-ior'], stdout=subprocess.PIPE)
In [3]: uname = res.stdout.read().strip()
In [4]: uname
Out[4]: '4.2.0-c9 x86_64 GNU/Linux'
In [5]: 'Linux' in uname
Out[5]: True
In [6]: 'Linux' not in uname                                                                                                                                                      
Out[6]: False

If string2 contains string1, string1 in string2 returns True, otherwise, it returns
False. So, checking to see if "Linux" was in our uname string returned True, but checking
to see if "Unix" was in our uname returned false.Sometimes you only need to know if a 
string is a substring of another string. Other times, you need to know where in a string 
the substring occurs. find() and index() let you do that.

In [19]: uname.index('Linux')
Out[19]: 20
In [20]: uname.find('Linux')
Out[20]: 20
In [23]: uname.find('Debian')
Out[23]: -1
In [24]: uname.index('Debian')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-24-97ca2e4d7f71> in <module>()
----> 1 uname.index('Debian')

ValueError: substring not found

If string1 is in string2, string2.find(string1) returns
the index of the first character of string1, otherwise, it returns –1.

String slice:
-------------
In [13]: smp_index = uname.index('SMP')
In [14]: smp_index
Out[14]: 9
In [15]: uname[smp_index:]
Out[15]: 'SMP Tue Feb 12 02:46:46 UTC 2008'
In [16]: uname[:smp_index]
Out[16]: 'Linux #1 '
In [17]: uname
Out[17]: 'Linux #1 SMP Tue Feb 12 02:46:46 UTC 2008'

We were able to see every character from the index of finding "SMP" to the end of the
string with the slice syntax string[index:]. We were also able to see every character
from the beginning of the uname string to the index of finding "SMP" with the slice syntax
string[:index]. The slight variation between these two is which side of the index the
colon (:) finds itself on.

Two other strings that are occasionally methods are startswith() and endswith(). As
their names imply, they can help you determine whether a string “starts with” or “ends
with” a particular substring.

In [1]: some_string = "Raymond Luxury-Yacht"
In [2]: some_string.startswith("Raymond")
Out[2]: True
In [3]: some_string.startswith("Throatwarbler")
Out[3]: False
In [4]: some_string.endswith("Luxury-Yacht")
Out[4]: True
In [5]: some_string.endswith("Mangrove")
Out[5]: False

Methods to work on White Spaces:
--------------------------------
We have some other methods to remove the white spaces(trailing, ending and both).
lstrip() - Used to remove trailing white spaces.
	Usage : some_string.lstrip()
rstrip() - Used to remove ending white spaces.
	Usage : some_string.rstrip()
strip() - Used to remove both trailing and ending white spaces.
	Usage : some_string.strip()

In [11]: new_string = "  Test String  "
In [12]: new_string
Out[12]: '  Test String  '
In [13]: new_string.lstrip()
Out[13]: 'Test String  '
In [14]: new_string.rstrip()
Out[14]: '  Test String'
In [15]: new_string.strip()
Out[15]: 'Test String'

These will not only remove the white spaces we can use these as we need. Means if we need 
to remove any characters at trailing or ending then we can use these. For example if we 
have '<' at begining and '>' characters at the begining and ending then we'll see how can 
we remove these.

In [16]: xml_tag = "<some_tag>"
In [17]: xml_tag
Out[17]: '<some_tag>'
In [18]: xml_tag.lstrip("<")
Out[18]: 'some_tag>'
In [19]: xml_tag.rstrip(">")
Out[19]: '<some_tag'
In [20]: xml_tag.lstrip("<").rstrip(">")
Out[20]: 'some_tag'
In [21]: xml_tag.strip("<").strip(">")
Out[21]: 'some_tag'
In [22]: xml_tag.strip("<>")
Out[22]: 'some_tag'

You might have assumed that the strip()s stripped off an exact occurrence of the string
you fed it, but the strips actually remove any sequential occurrence of the specified
characters from the appropriate side of the string. In that last example, we told
strip() to remove "<>". That doesn’t mean to exactly match "<>" and remove any
occurrences of those two characters that are adjacent to one another in that order; it
means remove any occurrences of "<" or ">" that are adjacent to one another on either
end of the string.

In [28]: gt_lt_str = "<><><>gt lt str<><><>"
In [29]: gt_lt_str.strip("<>")
Out[29]: 'gt lt str'
In [30]: gt_lt_str.strip("><")
Out[30]: 'gt lt str'

In [35]: foo_str = "<fooooooo>blah<foo>"
In [36]: foo_str.strip("<foo>")
Out[36]: 'blah'
In [37]: foo_str.strip("<fo>")
Out[37]: 'blah'
In [38]: foo_str.strip("><fo")
Out[38]: 'blah'
In [39]: foo_str.strip("><of")
Out[39]: 'blah'

The methods upper() and lower() are useful, particularly when you need to compare
two strings without regard to whether the characters are upper- or lowercase.

In [40]: mixed_string = "TEst StrInG"
In [41]: mixed_string == "TEST STRING"                                                                                                                                       
Out[41]: False
In [42]: mixed_string == "test string"
Out[42]: False
In [43]: mixed_string.lower() == "test string"                                                                                                                                    
Out[43]: True
In [44]: mixed_string.upper() == "TEST STRING"                                                                                                                                    
Out[44]: True
In [45]: mixed_string.lower()
Out[45]: 'test string'
In [46]: mixed_string.upper()
Out[46]: 'TEST STRING'


