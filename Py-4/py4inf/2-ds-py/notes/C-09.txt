# Dictionaries
--------------

Different names for Dictionaries:
Associative Arrays - Perl/Php
Properties of Map or HashMap - Java
Property Bag - C#/.Net

An example of working with Dictionaries:

	purse = dict()  
	purse['money'] = 12  
	purse['candy'] = 3  
	purse['tissues'] = 75  
	print purse  

Output:
	{'money':12,'tissues':75,'candy':3} 
The output shows both the key('money') and the value ('12'). The value can be modified, like with lists.
For example:

	purse['candy'] = purse['candy'] + 2 

Will change the value of 'candy' to 5.
Dictionaries are like Lists except that they use keys('money') instead of numbers to look up values.
(Lists are ordered, Dictionaries are not and so rely on keys for lookup). Dictionary literals (constants)
use curly braces {} and have a list of key : value pairs. As usual for dictionaries, the list is unordered.

Using Dictionary to tally/count items:

The "in/not in" operators can be used to see if a key exists in the dictionary - without resulting in a traceback error.

	counts = dict()  
	names = ['csev','owen','csev','zqian','cwen']  
	for name in names:  
	  if name not in counts:  
	    counts[name]= 1  
	  else:  
	    counts[name] = counts[name] + 1  
	print counts  

The above operation is so common, that the method 'get' does it for us.

	print counts.get(name,0) 

Performs the same operation as:

	if name in counts:  
	  print counts[name]  
	else:  
	  print 0  

-----------------------------------------------------------------------
	counts = dict()  
	names = ['csev','owen','csev','zqian','cwen']  
	for name in names:  
	  counts[name] = counts.get(name,0) + 1  
	print counts  
