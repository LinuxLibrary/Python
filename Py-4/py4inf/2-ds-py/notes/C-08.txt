# List:
-------
Lists: 
- Collection - allows us to put many values in a single variable.
- Simple variables are not collections. The previous value is overwritten when changed.
- A List is made up of list 'constants'. Lists are surrounded by square brackets [] and
  the constants in the list are separated by commas. ([2,4,6,8]).
- A List element can be any Python object, even another list
- A List can be empty
- Lists are mutable (they can be changed)
- This is a big difference between lists and strings. Strings are NOT mutable. Strings
  and lists are similar when it comes to other functions such as concatenation, slicing,
  the pattern for indexing the elements within the list, and others.
- When len() is used on a list, it counts the number of constants that make up the list.
  (not the number of characters)
- Lists can be concatenated using +
- Lists can be sliced
- List is a unique type that can be checked using type() (result: <type 'list'>)
- An empty list can be created with list(), or setting a variable to "[]", e.g. stuff = []
- Lists can be tested for contents using in/not in
- List is an ordered sequence

List Methods:
- Read more about list Methods online at: http://docs.python.org/tutorial/datastructures.html
- Methods: append, count, extend, index, insert, pop, remove, reverse, sort
- append() - use to add constants to the end of a list (lst.append('word'))
- remove() - use to remove constants from a list
- sort() - use to sort the list. It changes the list permanently.

List Functions:
- len() - find length, max() - find highest value, min() - find lowest value, sum() - add all
  values average can be found with sum()/len()

Selection in a List:
- Look up items in a list using an index specified in square brackets. The number in the inde
  -x indicates the numbered item in the list.
  For example: For friends = ['Joseph','Glen','Sally'] using "print friends [1]" will print o
  -ut "Glen" (remember numbering starts with zero)

Using Strings and Lists Together:
- "Split" breaks a string into parts and produces a list of strings.
	abc = 'With three words'
	stuff = abc.split()
	print stuff
	['With','three','words']
* Split sees multiple spaces as one, creates one split.
* Define a delimiter for split by entering a parameter (i.e. split(';') to use semicolon as a
  delimiter).

Del:
Del is a command which removes what corresponds to the index of the list. For example, if we h
-ave a = [1, 2, 3, 4, 5] del a[0] returns [2, 3, 4, 5].
If we have multiple arguments after del, then del first updates the list, and then removes the
next argument. For example if a = [1, 2, 3, 4, 5] del a[0], a[2] returns [2, 3, 5], since a[0]
first gets deleted yielding [2, 3, 4, 5], then since the 2-element of [2, 3, 4, 5] is 4, 4 get
-s deleted.

----------------------------------------------------------------------------------------------
list = [1, 2, 3, 4, 5, 6, 7]

def chop(t) :
    del t[0]
    del t[-1]

# print results
print 'The original list:' , list
print "The value returned by the 'chop' function:" , chop(list)
print "The modified list resulting from the 'chop' function: " , list

=====================================================================

list = [1, 2, 3, 4, 5, 6, 7]

def middle(t) :
    return t[1:-1]

# print results
print 'The original list: ', list
print "The new list produced by the 'middle' function:" , middle(list)

=====================================================================

def chop(mlist):                      # this function returns nothing
   if len(mlist)==0:
      print 'there is nothing to chop'
      exit()
   if len(mlist)==1:
      print 'only one element found, deleted..'
      del mlist[0]
      exit()
   else:
      print 'first and last element deleted'
      del mlist[0]
      del mlist[len(mlist)-1]

=====================================================================

origList = [1, 2, 3, 4, 5, 6, 7]

def chop(origList):
    newList = list(origList)        # copy to a new list
    del newList[0]                  # remove 1st element
    del newList[len(newList)-1]     # remove last element

    return newList[:]     # the Question doesn't make sense. Why write a function that return None.
                                    # I changed it to return the newList[:] instead. Just comment out this line
                                    # with a "#" and it will return None.
def middle(origList):
    newList = list(origList)
    return newList[1:-1]

print "Original list:", origList
print "Chopped list:", chop(origList)
print "Only middle list:", middle(origList)
